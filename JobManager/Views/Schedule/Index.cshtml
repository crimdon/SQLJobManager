
@{
    ViewBag.Title = "Job Summary";
}

@using GridMvc.Html;
@using GridMvc.Sorting;
@using JobManager.Models;

@section LeftMenu{
    @{Html.RenderAction("_LeftMenu", "Schedule");
    }
}

@model List<JobSummaryModel>

<link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />

<div>
    <h3>Job Summary</h3>
</div>


<div class="code-cut">
    @Html.Grid(Model).Columns(columns =>
{
    columns.Add()
    .Encoded(false)
    .Sanitized(false)
    .SetWidth(30)
    .RenderValueAs(JobSummaryModel => RenderStartButton(JobSummaryModel));
    columns.Add(JobSummaryModel => JobSummaryModel.ServerName)
    .Titled("Server Name")
    .Sortable(true)
    .Filterable(false);
    columns.Add(JobSummaryModel => JobSummaryModel.JobName)
    .Titled("Job Name")
    .Sortable(true)
    .SortInitialDirection(GridSortDirection.Ascending)
    .Filterable(false);
    columns.Add(JobSummaryModel => JobSummaryModel.Enabled)
    .Titled("Enabled")
    .Filterable(false)
    .RenderValueAs(JobSummaryModel => RenderEnabled(JobSummaryModel));
    columns.Add(JobSummaryModel => JobSummaryModel.Status)
    .Titled("Status")
    .Sortable(true)
    .Filterable(false);
    columns.Add(JobSummaryModel => JobSummaryModel.LastOutcome)
    .Titled("Last Outcome")
    .Sortable(true)
    .Filterable(false);
    columns.Add(JobSummaryModel => JobSummaryModel.LastRun)
    .Titled("Last Run")
    .Sortable(true)
    .Filterable(false);
    columns.Add(JobSummaryModel => JobSummaryModel.NextRun)
    .Titled("Next Run")
    .Sortable(true)
    .Filterable(false);
    columns.Add(JobSummaryModel => JobSummaryModel.Category)
    .Titled("Category")
    .Sortable(true)
    .Filterable(true);
    columns.Add(JobSummaryModel => JobSummaryModel.Runable)
    .Titled("Runable")
    .Filterable(true)
    .RenderValueAs(JobSummaryModel => RenderRunable(JobSummaryModel));
    columns.Add(JobSummaryModel => JobSummaryModel.Scheduled)
    .Titled("Scheduled")
    .Filterable(true)
    .RenderValueAs(JobSummaryModel => RenderScheduled(JobSummaryModel));
}).WithPaging(25)
</div>

@helper RenderEnabled (JobSummaryModel jobs)
    {
if (jobs.Enabled)
{
        <text>Yes</text>
}
else
{<text>No</text>}
}

@helper RenderScheduled(JobSummaryModel jobs)
{
if (jobs.Scheduled)
{
        <text>Yes</text>
}
else
{<text>No</text>}
}

@helper RenderRunable(JobSummaryModel jobs)
{
if (jobs.Runable)
{
        <text>Yes</text>
}
else
{<text>No</text>}
}

@helper RenderStartButton(JobSummaryModel jobs)
{
if (jobs.Runable && jobs.Status == "Idle")
{
    @Html.ActionLink("Start Job", "StartJob", "",
        new
        {
            dbServer = jobs.ServerName,
            jobID = jobs.JobID
        },
        new { @class = "btn btn-success" });
}
else
{<text></text>}
}
